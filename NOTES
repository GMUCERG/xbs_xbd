Changes listed in PROT_CHANGES
checksumsmall files from SUPERCOP used instead of checksum128b
Support for AEAD
Commented some debug statements with warnings about I2C to slightly increase
download speed, as that warning is probably AVR specific and likely to be a bug

we checksum all the things for verifiability

objcopy scripts reject .data+.bss > 3/4ths total RAM


SQLAlchemy will duplicate objects if inserted into list and parent is set. We go
w/ consistently having the child set the backreference, also inserting it into
the parent list, as child object often needs the parent upon construction

dirchecksum.py recursively checksums contents of directory


In order to add a new operation, ensure the operation is in OPERATIONS (needs to
conform to the SUPERCOP format). Modify xbxpy/xbx/run_op.py to add an [Operation
Name]Run class using the others as a template, and add to the OPERATIONS
constant at the top of that file. Add a directory in embedded/xbd/xbd_op named
crypto_[operation] and add files to be linked in. See aead and hash for
examples, and examine SUPERCOP


Need to justify cutoff for maximum AEAD parameter sizes

Explain stack usage is measured from only usage of crypto function, while .bss, .data, and .text is total including test harness

Explain presence of checksumsmall


-DNDEBUG has to be set to disable assertions

supercop interface does not allow streaming

does not allow separating out results for key scheduling vs encrypt

TODO use cycle counters for platforms that support it

watchdog timeout should always be shorter than tcp timeout


size puts read-only sections and executable sections into .text, else if has
contents into .data, else .bss 


code cannot use malloc, as that is not deterministic and suitable for many
realtime applications. In addition, determining utilized memory is difficult due
to fragmentation

TODO: blacklist/whitelist with full platform/operation/primitive/implementation
tuple (optionally hash)


Use global blacklist to block implementations using malloc

document how to fill out libsupercop deps
for i in $(grep -rl '\(crypto_core\|crypto_verify\)' |xargs dirname); do echo $i $(../../dirchecksum $i); done

0cipher is no-op- test harness has to ignore output
