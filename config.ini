# Please refer to xbxpy/xbx/config.ini for defaults

[hardware]
#platform = ek-tm4c123gxl_16mhz
#platform = msp-exp430f5529lp_16mhz
#platform = msp430fr5994_16mhz
platform = msp432p401r

[algorithm]
# Operation
operation = crypto_aead
#operation = crypto_hash

# Newline seperated list of primitives to work on
primitives = 
             0cipher
#            acorn128v3
             ascon128v12
             ascon128av12
             aes128n12t8clocv3
            twine80n6t4clocv3
            aes128n12t8silcv3
            present80n6t4silcv3
            led80n6t4silcv3
            simonjambu96v2
            simonjambu64v2
            simonjambu128v2
            norx3241v3
            norx3261v3
            aes256otrpv3
            aes128otrpv3
            aes128otrsv3
            aes256otrsv3
            deoxysi128v141
            deoxysi256v141
            aesjambuv2
            norx6441v3
            norx6444v3
            norx6461v3
            tiaoxinv2
            aegis128l
            aegis256
            aezv5
            colm0v1
            colm127v1
            aeadaes128ocbtaglen128v1
            aeadaes128ocbtaglen96v1
            aeadaes128ocbtaglen64v1
            aeadaes192ocbtaglen128v1
            aeadaes192ocbtaglen96v1
            aeadaes192ocbtaglen64v1
            morus1280128v2
            morus1280256v2
            
#             aes256gcmv1   
#             aes128gcmv1
#             icepole128v1
#             keccakc512
#             aegis128          --makefile fails because of inline functions            
#             aegis128l         --KEYBYTES too large error
#             aes128n12t8clocv3
#             aes128n12t8silcv3
#             aes128otrpv3
#             aescopav2         --failed because of syscall to __sbrk?
#             morus640128v2     --failed because of inline functions
#             norx3241v3
#             tiaoxinv2
#             jambusimon64v2

#CAESAR
#             aeadaes192ocbtaglen64v1
#             Colm127v1
#             Colmov1
#             OCB128Taglen128
#             OCBAES128Taglen64
#             OCBAES192Taglen64
#             OCBAES192Taglen96
#             OCBAES192Taglen128
#             OCBAES256Taglen64
#             OCBAES256Taglen96
#             OCBAES256Taglen128

#work w/o modification
#             aes128n12t8silcv3
#             aes128n12t8clocv3
#             aesjambuv2
#             aes128otrpv3
#             aes128otrsv3

#temp fix: return in 'def test(num):'
#             acorn128v3      

#             ascon128v12
#morus works 
#             morus640128v2
 
[implementation]

# # If whitelist is set, blacklists are ignored and only implementations in whitelist are run
# # Newline seperated path, relative from operation directory
whitelist =
        0cipher/empty
        ascon128v12/ref
        morus640128v2/ref
        ascon128av12/ref
        aes128n12t8clocv3/ref
        
        twine80n6t4clocv3/ref
        aes128n12t8silcv3/ref
        
        present80n6t4silcv3/ref
        led80n6t4silcv3/ref
        simonjambu96v2/ref
        simonjambu64v2/ref
        simonjambu128v2/ref
        norx3241v3/ref
        norx3261v3/ref
        aes256otrpv3/ref
        aes128otrpv3/ref
        aes128otrsv3/ref
        aes256otrsv3/ref
        deoxysi128v141/ref
        deoxysi256v141/ref
        aesjambuv2/ref
        norx6441v3/ref
        norx6444v3/ref
        norx6461v3/ref
        tiaoxinv2/ref
        aegis128l/ref
        aegis256/ref
        aezv5/ref
        colm0v1/ref
        colm127v1/ref
        aeadaes128ocbtaglen128v1/ref
        aeadaes128ocbtaglen96v1/ref    
        aeadaes128ocbtaglen64v1/ref   
        aeadaes192ocbtaglen128v1/ref
        aeadaes192ocbtaglen96v1/ref    
        aeadaes192ocbtaglen64v1/ref   
        aeadaes256ocbtaglen128v1/ref
        aeadaes256ocbtaglen96v1/ref    
        aeadaes256ocbtaglen64v1/ref  
        morus1280128v2/ref 
        morus1280256v2/ref
        

# # List for blacklisting implementations not already excluded in global/platform blacklist file
# # Each entry on a new line: {path relative from operation directory} [optional dirchecksum.py generated hash, or 0] [comments]
blacklist =

# # Single line regex for blacklisting implementations
blacklist_regex = (openssl|^avx)

# Enforce checksum parameter in black/white-lists
enforce_bwlist_checksums = True


[paths]
data = data.db

[build]
# True if only first compiler is used (typically -O0) for debug purposes
one_compiler = True

# Build cores+1 implementations at a time. Should be kept True unless debugging, or examining logs where interleaved messages can be detrimental
parallel_build = True

[run]
# Rerun broken tests that have already been run. Default is False
#rerun = True

# Run checksum tests only once by default, since they are very slow
checksum_tests = 1

# By default, run benchmarks 3 times 
exec_runs = 1


[libsupercop]
# Specify implementations for libsupercop
# format: operation primitive implementation
implementations =
        crypto_verify 32 ref
        crypto_verify 16 ref
        crypto_verify 8 ref
        crypto_core aes128decrypt ref
        crypto_core aes128encrypt ref
        crypto_core aes256decrypt ref
        crypto_core aes256encrypt ref
[xbh]
# Our XBH runs at 16MHz, should not be changed
xbh_clock_hz = 120000000
# Host defaults to "xbh"
#address = 10.42.0.161
#port = 22595
[xbp]
# Shunt value in Ohms
shunt = 1
# gain of the current shunt amplifier 
gain = 50

