# STM32 Makefile for GNU toolchain and openocd
#
# This Makefile fetches the Cube firmware package from ST's' website.
# This includes: CMSIS, STM32 HAL, BSPs, USB drivers and examples.
#
# Usage:
#	make cube		Download and unzip Cube firmware
#	make program		Flash the board with OpenOCD
#	make openocd		Start OpenOCD
#	make debug		Start GDB and attach to OpenOCD
#	make dirs		Create subdirs like obj, dep_f1, ..
#	make template		Prepare a simple example project in this dir
#
# Copyright	2015 Steffen Vogel
# License	http://www.gnu.org/licenses/gpl.txt GNU Public License
# Author	Steffen Vogel <post@steffenvogel.de>
# Link		http://www.steffenvogel.de
#
# edited for the STM32F103RB

# A name common to all output files (elf, map, hex, bin, lst)
TARGET     = XBD_STM32F1

# Take a look into $(CUBE_DIR)/Drivers/BSP for available BSPs
# name needed in upper case and lower case
BOARD      = STM32F103RB_Nucleo
BOARD_UC   = STM32F1xx_Nucleo
BOARD_LC   = stm32f1xx_nucleo
BSP_BASE   = $(BOARD_LC)

GDBFLAGS   =


# MCU family and type in various capitalizations o_O
MCU_FAMILY = stm32f1xx
MCU_LC     = stm32f103xb
MCU_MC     = STM32F103xB
MCU_UC     = STM32F103RB

# path of the ld-file
LDFILE      = ../../hal/drivers/XBD_BL.ld

# Your C files from the /src directory
SRCS       = XBD_BL.c
SRCS      += system_$(MCU_FAMILY).c
SRCS      += stm32f1xx_it.c
SRCS      += i2c_comms.c
SRCS      += stm32f1xx_hal_msp.c
SRCS      += XBD_crc.c
SRCS      += XBD_debug.c
SRCS      += XBD_BL.c
SRCS      += XBD_util.c
SRCS      += XBD_commands.c
SRCS      += XBD_HAL.c


# Basic HAL libraries
SRCS      += stm32f1xx_hal_rcc.c stm32f1xx_hal_rcc_ex.c stm32f1xx_hal.c stm32f1xx_hal_cortex.c stm32f1xx_hal_gpio.c stm32f1xx_hal_i2c.c stm32f1xx_hal_pwr.c $(BSP_BASE).c stm32f1xx_hal_flash.c stm32f1xx_hal_flash_ex.c

PATH_AF = ../../../../embedded/xbd/xbd_af
PATH_BL =../../../../embedded/xbd/xbd_bl
PATH_HAL = ../../hal

CUBE_DIR   = $(PATH_HAL)/drivers

BSP_DIR    = $(CUBE_DIR)
HAL_DIR    = $(CUBE_DIR)
CMSIS_DIR  = $(CUBE_DIR)

DEV_DIR    = $(CUBE_DIR)

# that's it, no need to change anything below this line!

###############################################################################
# Toolchain

PREFIX     = arm-none-eabi
CC         = $(PREFIX)-gcc
AR         = $(PREFIX)-ar
OBJCOPY    = $(PREFIX)-objcopy
OBJDUMP    = $(PREFIX)-objdump
SIZE       = $(PREFIX)-size
GDB        = $(PREFIX)-gdb


###############################################################################
# Options

# Defines
DEFS       = -D$(MCU_MC) -DUSE_HAL_DRIVER

# Debug specific definitions for semihosting
DEFS       += -DUSE_DBPRINTF

# Include search paths (-I)
INCS       = -I$(CUBE_DIR)
INCS      += -I$(PATH_BL)
INCS      += -I$(PATH_AF)
INCS      += -I$(PATH_HAL)

# Library search paths
LIBS       = -L$(CUBE_DIR)

# Compiler flags
CFLAGS     = -Wall -g -std=gnu11 -Os
CFLAGS    += -mlittle-endian -mcpu=cortex-m3 -mthumb
CFLAGS    += -ffunction-sections -fdata-sections -fno-builtin
CFLAGS    += $(INCS) $(DEFS)

# Linker flags
LDFLAGS    = -Wl,--gc-sections -Wl,-Map=$(TARGET).map $(LIBS) -T$(LDFILE)

# Enable Semihosting
LDFLAGS   += --specs=rdimon.specs -lc -lrdimon

# Source search paths
VPATH      = ../
VPATH     += $(BSP_DIR)
VPATH     += $(PATH_AF)
VPATH     += $(PATH_BL)
VPATH     += $(CUBE_DIR)
VPATH     += $(PATH_HAL)

OBJS       = $(addprefix obj_f1/,$(SRCS:.c=.o))
DEPS       = $(addprefix dep_f1/,$(SRCS:.c=.d))

# Prettify output
V = 0
ifeq ($V, 0)
	Q = @
	P = > /dev/null
endif

###################################################

.PHONY: all dirs program debug template clean

all: XBD_version $(TARGET).bin

-include $(DEPS)

dirs: dep_f1 obj_f1
dep_f1 obj_f1:
	@echo "[MKDIR]   $@"
	$Qmkdir -p $@

obj_f1/%.o : %.c | dirs
	@echo "[CC]      $(notdir $<)"
	$Q$(CC) $(CFLAGS) -c -o $@ $< -MMD -MF dep_f1/$(*F).d

$(TARGET).elf: $(OBJS)
	@echo "[LD]      $(TARGET).elf"
	$Q$(CC) $(CFLAGS) $(LDFLAGS) ../startup_$(MCU_LC).s $^ -o $@
	@echo "[OBJDUMP] $(TARGET).lst"
	$Q$(OBJDUMP) -St $(TARGET).elf >$(TARGET).lst
	@echo "[SIZE]    $(TARGET).elf"
	$(SIZE) $(TARGET).elf

$(TARGET).bin: $(TARGET).elf
	@echo "[OBJCOPY] $(TARGET).bin"
	$Q$(OBJCOPY) -O binary $< $@

openocd:
	$(OCD) -s $(OCD_DIR) $(OCDFLAGS)

program: all
	$(OCD) -s $(OCD_DIR) $(OCDFLAGS) -c "program $(TARGET).elf verify reset"

debug:
	@if ! nc -z localhost 4242; then \
		echo "\n\t[Error] OpenOCD is not running! Start it with: 'make openocd'\n"; exit 1; \
	else \
		$(GDB)  -ex "target extended localhost:4242" \
			-ex "monitor arm semihosting enable" \
			-ex "monitor reset halt" \
			-ex "load" \
			-ex "monitor reset init" \
			$(GDBFLAGS) $(TARGET).elf; \
	fi


clean:
	@echo "[RM]      $(TARGET).bin"; rm -f $(TARGET).bin
	@echo "[RM]      $(TARGET).elf"; rm -f $(TARGET).elf
	@echo "[RM]      $(TARGET).map"; rm -f $(TARGET).map
	@echo "[RM]      $(TARGET).lst"; rm -f $(TARGET).lst
	@echo "[RMDIR]   dep_f1"          ; rm -fr dep_f1
	@echo "[RMDIR]   obj_f1"          ; rm -fr obj_f1

## Generate and autoupdate XBD_version.h
xbxdir = ../../../..
include ../../../../embedded/xbd/xbd_af/version.mk
-include *.d
-include xbd_af/*.d
-include xbd_bl/*.d
